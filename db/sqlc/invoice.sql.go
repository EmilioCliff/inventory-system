// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: invoice.sql

package db

import (
	"context"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
    invoice_number, user_invoice_id, invoice_data, user_invoice_username
) VALUES (
  $1, $2, $3, $4
)
RETURNING invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, created_at
`

type CreateInvoiceParams struct {
	InvoiceNumber       string `json:"invoice_number"`
	UserInvoiceID       int32  `json:"user_invoice_id"`
	InvoiceData         []byte `json:"invoice_data"`
	UserInvoiceUsername string `json:"user_invoice_username"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.InvoiceNumber,
		arg.UserInvoiceID,
		arg.InvoiceData,
		arg.UserInvoiceUsername,
	)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.UserInvoiceID,
		&i.UserInvoiceUsername,
		&i.InvoiceData,
		&i.CreatedAt,
	)
	return i, err
}

const getInvoice = `-- name: GetInvoice :one
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, created_at FROM invoices
WHERE invoice_number = $1 
LIMIT 1
`

func (q *Queries) GetInvoice(ctx context.Context, invoiceNumber string) (Invoice, error) {
	row := q.db.QueryRow(ctx, getInvoice, invoiceNumber)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.UserInvoiceID,
		&i.UserInvoiceUsername,
		&i.InvoiceData,
		&i.CreatedAt,
	)
	return i, err
}

const getUserInvoicesByID = `-- name: GetUserInvoicesByID :many
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, created_at FROM invoices
WHERE user_invoice_id = $1
`

func (q *Queries) GetUserInvoicesByID(ctx context.Context, userInvoiceID int32) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, getUserInvoicesByID, userInvoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.InvoiceID,
			&i.InvoiceNumber,
			&i.UserInvoiceID,
			&i.UserInvoiceUsername,
			&i.InvoiceData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserInvoicesByUsername = `-- name: GetUserInvoicesByUsername :many
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, created_at FROM invoices
WHERE user_invoice_username = $1
`

func (q *Queries) GetUserInvoicesByUsername(ctx context.Context, userInvoiceUsername string) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, getUserInvoicesByUsername, userInvoiceUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.InvoiceID,
			&i.InvoiceNumber,
			&i.UserInvoiceID,
			&i.UserInvoiceUsername,
			&i.InvoiceData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvoices = `-- name: ListInvoices :many
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, created_at FROM invoices
ORDER BY invoice_id
`

func (q *Queries) ListInvoices(ctx context.Context) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, listInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.InvoiceID,
			&i.InvoiceNumber,
			&i.UserInvoiceID,
			&i.UserInvoiceUsername,
			&i.InvoiceData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
