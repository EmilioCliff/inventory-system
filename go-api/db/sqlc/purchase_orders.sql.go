// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: purchase_orders.sql

package db

import (
	"context"
)

const countPurchaseOrders = `-- name: CountPurchaseOrders :one
SELECT COUNT(*) FROM purchase_orders
`

func (q *Queries) CountPurchaseOrders(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPurchaseOrders)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPurchaseOrder = `-- name: CreatePurchaseOrder :one
INSERT INTO purchase_orders (
  id, supplier_name, supplier_address, lpo_data, lpo_pdf
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, supplier_name, supplier_address, lpo_data, lpo_pdf, created_at
`

type CreatePurchaseOrderParams struct {
	ID              string `json:"id"`
	SupplierName    string `json:"supplier_name"`
	SupplierAddress string `json:"supplier_address"`
	LpoData         []byte `json:"lpo_data"`
	LpoPdf          []byte `json:"lpo_pdf"`
}

func (q *Queries) CreatePurchaseOrder(ctx context.Context, arg CreatePurchaseOrderParams) (PurchaseOrder, error) {
	row := q.db.QueryRow(ctx, createPurchaseOrder,
		arg.ID,
		arg.SupplierName,
		arg.SupplierAddress,
		arg.LpoData,
		arg.LpoPdf,
	)
	var i PurchaseOrder
	err := row.Scan(
		&i.ID,
		&i.SupplierName,
		&i.SupplierAddress,
		&i.LpoData,
		&i.LpoPdf,
		&i.CreatedAt,
	)
	return i, err
}

const deletePurchaseOrder = `-- name: DeletePurchaseOrder :exec
DELETE FROM purchase_orders
WHERE id = $1
`

func (q *Queries) DeletePurchaseOrder(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePurchaseOrder, id)
	return err
}

const getPurchaseOrder = `-- name: GetPurchaseOrder :one
SELECT id, supplier_name, supplier_address, lpo_data, lpo_pdf, created_at FROM purchase_orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPurchaseOrder(ctx context.Context, id string) (PurchaseOrder, error) {
	row := q.db.QueryRow(ctx, getPurchaseOrder, id)
	var i PurchaseOrder
	err := row.Scan(
		&i.ID,
		&i.SupplierName,
		&i.SupplierAddress,
		&i.LpoData,
		&i.LpoPdf,
		&i.CreatedAt,
	)
	return i, err
}

const listPurchaseOrder = `-- name: ListPurchaseOrder :many
SELECT id, supplier_name, supplier_address, lpo_data, lpo_pdf, created_at  FROM purchase_orders
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListPurchaseOrderParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPurchaseOrder(ctx context.Context, arg ListPurchaseOrderParams) ([]PurchaseOrder, error) {
	rows, err := q.db.Query(ctx, listPurchaseOrder, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PurchaseOrder{}
	for rows.Next() {
		var i PurchaseOrder
		if err := rows.Scan(
			&i.ID,
			&i.SupplierName,
			&i.SupplierAddress,
			&i.LpoData,
			&i.LpoPdf,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
