// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: c2b.sql

package db

import (
	"context"
	"time"
)

const createC2BTransaction = `-- name: CreateC2BTransaction :one
INSERT INTO c2b_transactions (fullname, phone, amount, transaction_id, org_account_balance, transaction_time)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, fullname, phone, amount, transaction_id, org_account_balance, transaction_time, created_at
`

type CreateC2BTransactionParams struct {
	Fullname          string    `json:"fullname"`
	Phone             string    `json:"phone"`
	Amount            string    `json:"amount"`
	TransactionID     string    `json:"transaction_id"`
	OrgAccountBalance string    `json:"org_account_balance"`
	TransactionTime   time.Time `json:"transaction_time"`
}

func (q *Queries) CreateC2BTransaction(ctx context.Context, arg CreateC2BTransactionParams) (C2bTransaction, error) {
	row := q.db.QueryRow(ctx, createC2BTransaction,
		arg.Fullname,
		arg.Phone,
		arg.Amount,
		arg.TransactionID,
		arg.OrgAccountBalance,
		arg.TransactionTime,
	)
	var i C2bTransaction
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Phone,
		&i.Amount,
		&i.TransactionID,
		&i.OrgAccountBalance,
		&i.TransactionTime,
		&i.CreatedAt,
	)
	return i, err
}

const getC2BTransaction = `-- name: GetC2BTransaction :one
SELECT id, fullname, phone, amount, transaction_id, org_account_balance, transaction_time, created_at FROM c2b_transactions
WHERE transaction_id = $1
LIMIT 1
`

func (q *Queries) GetC2BTransaction(ctx context.Context, transactionID string) (C2bTransaction, error) {
	row := q.db.QueryRow(ctx, getC2BTransaction, transactionID)
	var i C2bTransaction
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Phone,
		&i.Amount,
		&i.TransactionID,
		&i.OrgAccountBalance,
		&i.TransactionTime,
		&i.CreatedAt,
	)
	return i, err
}

const listC2BTransactions = `-- name: ListC2BTransactions :many
SELECT id, fullname, phone, amount, transaction_id, org_account_balance, transaction_time, created_at 
FROM c2b_transactions
WHERE created_at BETWEEN $1 AND $2
ORDER BY created_at DESC
`

type ListC2BTransactionsParams struct {
	FromDate time.Time `json:"from_date"`
	ToDate   time.Time `json:"to_date"`
}

func (q *Queries) ListC2BTransactions(ctx context.Context, arg ListC2BTransactionsParams) ([]C2bTransaction, error) {
	rows, err := q.db.Query(ctx, listC2BTransactions, arg.FromDate, arg.ToDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []C2bTransaction{}
	for rows.Next() {
		var i C2bTransaction
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Phone,
			&i.Amount,
			&i.TransactionID,
			&i.OrgAccountBalance,
			&i.TransactionTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
