// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transaction.sql

package db

import (
	"context"
)

const allUserTransactions = `-- name: AllUserTransactions :many
SELECT transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at FROM transactions
WHERE transaction_user_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type AllUserTransactionsParams struct {
	TransactionUserID int32 `json:"transaction_user_id"`
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
}

func (q *Queries) AllUserTransactions(ctx context.Context, arg AllUserTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, allUserTransactions, arg.TransactionUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.TransactionUserID,
			&i.Amount,
			&i.Status,
			&i.DataSold,
			&i.PhoneNumber,
			&i.MpesaReceiptNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const changeStatus = `-- name: ChangeStatus :one
UPDATE transactions
    set status = $2
WHERE transaction_id = $1
RETURNING transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at
`

type ChangeStatusParams struct {
	TransactionID string `json:"transaction_id"`
	Status        bool   `json:"status"`
}

func (q *Queries) ChangeStatus(ctx context.Context, arg ChangeStatusParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, changeStatus, arg.TransactionID, arg.Status)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.TransactionUserID,
		&i.Amount,
		&i.Status,
		&i.DataSold,
		&i.PhoneNumber,
		&i.MpesaReceiptNumber,
		&i.CreatedAt,
	)
	return i, err
}

const countAllUserTransactions = `-- name: CountAllUserTransactions :one
SELECT COUNT(*) FROM transactions
WHERE transaction_user_id = $1
`

func (q *Queries) CountAllUserTransactions(ctx context.Context, transactionUserID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAllUserTransactions, transactionUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFailedTransactions = `-- name: CountFailedTransactions :one
SELECT COUNT(*) FROM transactions
WHERE status = false
`

func (q *Queries) CountFailedTransactions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countFailedTransactions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFailedUserTransactions = `-- name: CountFailedUserTransactions :one
SELECT COUNT(*) FROM transactions
WHERE transaction_user_id = $1
AND status = false
`

func (q *Queries) CountFailedUserTransactions(ctx context.Context, transactionUserID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countFailedUserTransactions, transactionUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSuccessfulTransactions = `-- name: CountSuccessfulTransactions :one
SELECT COUNT(*) FROM transactions
WHERE status = true
`

func (q *Queries) CountSuccessfulTransactions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSuccessfulTransactions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSuccessfulUserTransactions = `-- name: CountSuccessfulUserTransactions :one
SELECT COUNT(*) FROM transactions
WHERE transaction_user_id = $1
AND status = true
`

func (q *Queries) CountSuccessfulUserTransactions(ctx context.Context, transactionUserID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countSuccessfulUserTransactions, transactionUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTransactions = `-- name: CountTransactions :one
SELECT COUNT(*) FROM transactions
`

func (q *Queries) CountTransactions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTransactions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    transaction_id, amount, data_sold, phone_number, transaction_user_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at
`

type CreateTransactionParams struct {
	TransactionID     string `json:"transaction_id"`
	Amount            int32  `json:"amount"`
	DataSold          []byte `json:"data_sold"`
	PhoneNumber       string `json:"phone_number"`
	TransactionUserID int32  `json:"transaction_user_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.TransactionID,
		arg.Amount,
		arg.DataSold,
		arg.PhoneNumber,
		arg.TransactionUserID,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.TransactionUserID,
		&i.Amount,
		&i.Status,
		&i.DataSold,
		&i.PhoneNumber,
		&i.MpesaReceiptNumber,
		&i.CreatedAt,
	)
	return i, err
}

const failedTransactions = `-- name: FailedTransactions :many
SELECT transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at FROM transactions
WHERE status = false
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type FailedTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FailedTransactions(ctx context.Context, arg FailedTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, failedTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.TransactionUserID,
			&i.Amount,
			&i.Status,
			&i.DataSold,
			&i.PhoneNumber,
			&i.MpesaReceiptNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const failedUserTransactions = `-- name: FailedUserTransactions :many
SELECT transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at FROM transactions
WHERE transaction_user_id = $1
AND status = false
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type FailedUserTransactionsParams struct {
	TransactionUserID int32 `json:"transaction_user_id"`
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
}

func (q *Queries) FailedUserTransactions(ctx context.Context, arg FailedUserTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, failedUserTransactions, arg.TransactionUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.TransactionUserID,
			&i.Amount,
			&i.Status,
			&i.DataSold,
			&i.PhoneNumber,
			&i.MpesaReceiptNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransaction = `-- name: GetTransaction :one
SELECT transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at FROM transactions
WHERE transaction_id = $1 
LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, transactionID string) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.TransactionUserID,
		&i.Amount,
		&i.Status,
		&i.DataSold,
		&i.PhoneNumber,
		&i.MpesaReceiptNumber,
		&i.CreatedAt,
	)
	return i, err
}

const getUserTransaction = `-- name: GetUserTransaction :one
SELECT transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at FROM transactions
WHERE transaction_user_id = $1 
LIMIT 1
`

func (q *Queries) GetUserTransaction(ctx context.Context, transactionUserID int32) (Transaction, error) {
	row := q.db.QueryRow(ctx, getUserTransaction, transactionUserID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.TransactionUserID,
		&i.Amount,
		&i.Status,
		&i.DataSold,
		&i.PhoneNumber,
		&i.MpesaReceiptNumber,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at FROM transactions
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.TransactionUserID,
			&i.Amount,
			&i.Status,
			&i.DataSold,
			&i.PhoneNumber,
			&i.MpesaReceiptNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const successTransactions = `-- name: SuccessTransactions :many
SELECT transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at FROM transactions
WHERE status = true
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type SuccessTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) SuccessTransactions(ctx context.Context, arg SuccessTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, successTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.TransactionUserID,
			&i.Amount,
			&i.Status,
			&i.DataSold,
			&i.PhoneNumber,
			&i.MpesaReceiptNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const successUserTransactions = `-- name: SuccessUserTransactions :many
SELECT transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at FROM transactions
WHERE transaction_user_id = $1
AND status = true
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type SuccessUserTransactionsParams struct {
	TransactionUserID int32 `json:"transaction_user_id"`
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
}

func (q *Queries) SuccessUserTransactions(ctx context.Context, arg SuccessUserTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, successUserTransactions, arg.TransactionUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.TransactionUserID,
			&i.Amount,
			&i.Status,
			&i.DataSold,
			&i.PhoneNumber,
			&i.MpesaReceiptNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
  set mpesa_receipt_number = $3,
  phone_number = $2
WHERE transaction_id = $1
RETURNING transaction_id, transaction_user_id, amount, status, data_sold, phone_number, mpesa_receipt_number, created_at
`

type UpdateTransactionParams struct {
	TransactionID      string `json:"transaction_id"`
	PhoneNumber        string `json:"phone_number"`
	MpesaReceiptNumber string `json:"mpesa_receipt_number"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction, arg.TransactionID, arg.PhoneNumber, arg.MpesaReceiptNumber)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.TransactionUserID,
		&i.Amount,
		&i.Status,
		&i.DataSold,
		&i.PhoneNumber,
		&i.MpesaReceiptNumber,
		&i.CreatedAt,
	)
	return i, err
}
