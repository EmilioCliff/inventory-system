// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transaction.sql

package db

import (
	"context"
)

const changeStatus = `-- name: ChangeStatus :one
UPDATE transactions
    set status = $2
WHERE transaction_id = $1
RETURNING transaction_id, amount, status, data_sold, created_at
`

type ChangeStatusParams struct {
	TransactionID string `json:"transaction_id"`
	Status        bool   `json:"status"`
}

func (q *Queries) ChangeStatus(ctx context.Context, arg ChangeStatusParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, changeStatus, arg.TransactionID, arg.Status)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.Status,
		&i.DataSold,
		&i.CreatedAt,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    transaction_id, amount, data_sold
) VALUES (
    $1, $2, $3
)
RETURNING transaction_id, amount, status, data_sold, created_at
`

type CreateTransactionParams struct {
	TransactionID string `json:"transaction_id"`
	Amount        int32  `json:"amount"`
	DataSold      []byte `json:"data_sold"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction, arg.TransactionID, arg.Amount, arg.DataSold)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.Status,
		&i.DataSold,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT transaction_id, amount, status, data_sold, created_at FROM transactions
WHERE transaction_id = $1 
LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, transactionID string) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.Status,
		&i.DataSold,
		&i.CreatedAt,
	)
	return i, err
}
