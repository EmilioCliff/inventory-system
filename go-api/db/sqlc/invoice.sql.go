// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invoice.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countInvoices = `-- name: CountInvoices :one
SELECT COUNT(*) FROM invoices
`

func (q *Queries) CountInvoices(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countInvoices)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserInvoicesByID = `-- name: CountUserInvoicesByID :one
SELECT COUNT(*) FROM invoices
WHERE user_invoice_id = $1
`

func (q *Queries) CountUserInvoicesByID(ctx context.Context, userInvoiceID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUserInvoicesByID, userInvoiceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserInvoicesByUsername = `-- name: CountUserInvoicesByUsername :one
SELECT COUNT(*) FROM invoices
WHERE user_invoice_username = $1
`

func (q *Queries) CountUserInvoicesByUsername(ctx context.Context, userInvoiceUsername string) (int64, error) {
	row := q.db.QueryRow(ctx, countUserInvoicesByUsername, userInvoiceUsername)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
    invoice_number, user_invoice_id, invoice_data, user_invoice_username, invoice_pdf, invoice_date
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, invoice_pdf, created_at, invoice_date
`

type CreateInvoiceParams struct {
	InvoiceNumber       string    `json:"invoice_number"`
	UserInvoiceID       int32     `json:"user_invoice_id"`
	InvoiceData         []byte    `json:"invoice_data"`
	UserInvoiceUsername string    `json:"user_invoice_username"`
	InvoicePdf          []byte    `json:"invoice_pdf"`
	InvoiceDate         time.Time `json:"invoice_date"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.InvoiceNumber,
		arg.UserInvoiceID,
		arg.InvoiceData,
		arg.UserInvoiceUsername,
		arg.InvoicePdf,
		arg.InvoiceDate,
	)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.UserInvoiceID,
		&i.UserInvoiceUsername,
		&i.InvoiceData,
		&i.InvoicePdf,
		&i.CreatedAt,
		&i.InvoiceDate,
	)
	return i, err
}

const getInvoice = `-- name: GetInvoice :one
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, invoice_pdf, created_at, invoice_date FROM invoices
WHERE invoice_number = $1 
LIMIT 1
`

func (q *Queries) GetInvoice(ctx context.Context, invoiceNumber string) (Invoice, error) {
	row := q.db.QueryRow(ctx, getInvoice, invoiceNumber)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.UserInvoiceID,
		&i.UserInvoiceUsername,
		&i.InvoiceData,
		&i.InvoicePdf,
		&i.CreatedAt,
		&i.InvoiceDate,
	)
	return i, err
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, invoice_pdf, created_at, invoice_date FROM invoices
WHERE invoice_id = $1 
LIMIT 1
`

func (q *Queries) GetInvoiceByID(ctx context.Context, invoiceID int64) (Invoice, error) {
	row := q.db.QueryRow(ctx, getInvoiceByID, invoiceID)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.UserInvoiceID,
		&i.UserInvoiceUsername,
		&i.InvoiceData,
		&i.InvoicePdf,
		&i.CreatedAt,
		&i.InvoiceDate,
	)
	return i, err
}

const getUserInvoicesByID = `-- name: GetUserInvoicesByID :many
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, invoice_pdf, created_at, invoice_date FROM invoices
WHERE user_invoice_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetUserInvoicesByIDParams struct {
	UserInvoiceID int32 `json:"user_invoice_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetUserInvoicesByID(ctx context.Context, arg GetUserInvoicesByIDParams) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, getUserInvoicesByID, arg.UserInvoiceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.InvoiceID,
			&i.InvoiceNumber,
			&i.UserInvoiceID,
			&i.UserInvoiceUsername,
			&i.InvoiceData,
			&i.InvoicePdf,
			&i.CreatedAt,
			&i.InvoiceDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserInvoicesByUsername = `-- name: GetUserInvoicesByUsername :many
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, invoice_pdf, created_at, invoice_date FROM invoices
WHERE user_invoice_username = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetUserInvoicesByUsernameParams struct {
	UserInvoiceUsername string `json:"user_invoice_username"`
	Limit               int32  `json:"limit"`
	Offset              int32  `json:"offset"`
}

func (q *Queries) GetUserInvoicesByUsername(ctx context.Context, arg GetUserInvoicesByUsernameParams) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, getUserInvoicesByUsername, arg.UserInvoiceUsername, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.InvoiceID,
			&i.InvoiceNumber,
			&i.UserInvoiceID,
			&i.UserInvoiceUsername,
			&i.InvoiceData,
			&i.InvoicePdf,
			&i.CreatedAt,
			&i.InvoiceDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvoices = `-- name: ListInvoices :many
SELECT invoice_id, invoice_number, user_invoice_id, user_invoice_username, invoice_data, invoice_pdf, created_at, invoice_date FROM invoices
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListInvoicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInvoices(ctx context.Context, arg ListInvoicesParams) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, listInvoices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.InvoiceID,
			&i.InvoiceNumber,
			&i.UserInvoiceID,
			&i.UserInvoiceUsername,
			&i.InvoiceData,
			&i.InvoicePdf,
			&i.CreatedAt,
			&i.InvoiceDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchILikeInvoices = `-- name: SearchILikeInvoices :many
SELECT invoice_number FROM invoices
WHERE LOWER(invoice_number) LIKE LOWER('%' || $1 || '%')
`

func (q *Queries) SearchILikeInvoices(ctx context.Context, dollar_1 pgtype.Text) ([]string, error) {
	rows, err := q.db.Query(ctx, searchILikeInvoices, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var invoice_number string
		if err := rows.Scan(&invoice_number); err != nil {
			return nil, err
		}
		items = append(items, invoice_number)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUserInvoices = `-- name: SearchUserInvoices :many
SELECT user_invoice_username FROM invoices
WHERE LOWER(user_invoice_username) LIKE LOWER('%' || $1 || '%')
`

func (q *Queries) SearchUserInvoices(ctx context.Context, dollar_1 pgtype.Text) ([]string, error) {
	rows, err := q.db.Query(ctx, searchUserInvoices, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var user_invoice_username string
		if err := rows.Scan(&user_invoice_username); err != nil {
			return nil, err
		}
		items = append(items, user_invoice_username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
