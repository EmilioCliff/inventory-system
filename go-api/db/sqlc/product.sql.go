// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products
`

func (q *Queries) CountProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  product_name, unit_price, packsize
) VALUES (
  $1, $2, $3
)
RETURNING product_id, product_name, unit_price, packsize, created_at
`

type CreateProductParams struct {
	ProductName string `json:"product_name"`
	UnitPrice   int32  `json:"unit_price"`
	Packsize    string `json:"packsize"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.ProductName, arg.UnitPrice, arg.Packsize)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.UnitPrice,
		&i.Packsize,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE product_id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT product_id, product_name, unit_price, packsize, created_at FROM products
WHERE product_id = $1 
LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, productID int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.UnitPrice,
		&i.Packsize,
		&i.CreatedAt,
	)
	return i, err
}

const getProductByProductName = `-- name: GetProductByProductName :one
SELECT product_id, product_name, unit_price, packsize, created_at FROM products
WHERE product_name = $1 
LIMIT 1
`

func (q *Queries) GetProductByProductName(ctx context.Context, productName string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByProductName, productName)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.UnitPrice,
		&i.Packsize,
		&i.CreatedAt,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT product_id, product_name, unit_price, packsize, created_at FROM products
WHERE product_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductForUpdate(ctx context.Context, productID int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProductForUpdate, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.UnitPrice,
		&i.Packsize,
		&i.CreatedAt,
	)
	return i, err
}

const getProductPrice = `-- name: GetProductPrice :one
SELECT unit_price FROM products
WHERE product_id = $1 
LIMIT 1
`

func (q *Queries) GetProductPrice(ctx context.Context, productID int64) (int32, error) {
	row := q.db.QueryRow(ctx, getProductPrice, productID)
	var unit_price int32
	err := row.Scan(&unit_price)
	return unit_price, err
}

const listAllProduct = `-- name: ListAllProduct :many
SELECT product_id, product_name, unit_price, packsize, created_at FROM products
ORDER BY product_name
`

func (q *Queries) ListAllProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listAllProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.UnitPrice,
			&i.Packsize,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProduct = `-- name: ListProduct :many
SELECT product_id, product_name, unit_price, packsize, created_at FROM products
ORDER BY product_name
LIMIT $1
OFFSET $2
`

type ListProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.UnitPrice,
			&i.Packsize,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchILikeProducts = `-- name: SearchILikeProducts :many
SELECT product_name FROM products
WHERE LOWER(product_name) LIKE LOWER('%' || $1 || '%')
`

func (q *Queries) SearchILikeProducts(ctx context.Context, dollar_1 pgtype.Text) ([]string, error) {
	rows, err := q.db.Query(ctx, searchILikeProducts, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var product_name string
		if err := rows.Scan(&product_name); err != nil {
			return nil, err
		}
		items = append(items, product_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
  set unit_price = $2,
  product_name = $3,
  packsize = $4
WHERE product_id = $1
RETURNING product_id, product_name, unit_price, packsize, created_at
`

type UpdateProductParams struct {
	ProductID   int64  `json:"product_id"`
	UnitPrice   int32  `json:"unit_price"`
	ProductName string `json:"product_name"`
	Packsize    string `json:"packsize"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ProductID,
		arg.UnitPrice,
		arg.ProductName,
		arg.Packsize,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.UnitPrice,
		&i.Packsize,
		&i.CreatedAt,
	)
	return i, err
}
