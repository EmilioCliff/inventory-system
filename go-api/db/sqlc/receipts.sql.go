// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: receipts.sql

package db

import (
	"context"
)

const countReceipts = `-- name: CountReceipts :one
SELECT COUNT(*) FROM receipts
`

func (q *Queries) CountReceipts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countReceipts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserReceiptsByID = `-- name: CountUserReceiptsByID :one
SELECT COUNT(*) FROM receipts
WHERE user_receipt_id = $1
`

func (q *Queries) CountUserReceiptsByID(ctx context.Context, userReceiptID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUserReceiptsByID, userReceiptID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReceipt = `-- name: CreateReceipt :one
INSERT INTO receipts(
    receipt_number, user_receipt_id, receipt_data, user_receipt_username, receipt_pdf
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at
`

type CreateReceiptParams struct {
	ReceiptNumber       string `json:"receipt_number"`
	UserReceiptID       int32  `json:"user_receipt_id"`
	ReceiptData         []byte `json:"receipt_data"`
	UserReceiptUsername string `json:"user_receipt_username"`
	ReceiptPdf          []byte `json:"receipt_pdf"`
}

func (q *Queries) CreateReceipt(ctx context.Context, arg CreateReceiptParams) (Receipt, error) {
	row := q.db.QueryRow(ctx, createReceipt,
		arg.ReceiptNumber,
		arg.UserReceiptID,
		arg.ReceiptData,
		arg.UserReceiptUsername,
		arg.ReceiptPdf,
	)
	var i Receipt
	err := row.Scan(
		&i.ReceiptID,
		&i.ReceiptNumber,
		&i.UserReceiptID,
		&i.UserReceiptUsername,
		&i.ReceiptData,
		&i.ReceiptPdf,
		&i.CreatedAt,
	)
	return i, err
}

const getReceipt = `-- name: GetReceipt :one
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE receipt_number = $1 
LIMIT 1
`

func (q *Queries) GetReceipt(ctx context.Context, receiptNumber string) (Receipt, error) {
	row := q.db.QueryRow(ctx, getReceipt, receiptNumber)
	var i Receipt
	err := row.Scan(
		&i.ReceiptID,
		&i.ReceiptNumber,
		&i.UserReceiptID,
		&i.UserReceiptUsername,
		&i.ReceiptData,
		&i.ReceiptPdf,
		&i.CreatedAt,
	)
	return i, err
}

const getReceiptByID = `-- name: GetReceiptByID :one
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE receipt_id = $1 
LIMIT 1
`

func (q *Queries) GetReceiptByID(ctx context.Context, receiptID int64) (Receipt, error) {
	row := q.db.QueryRow(ctx, getReceiptByID, receiptID)
	var i Receipt
	err := row.Scan(
		&i.ReceiptID,
		&i.ReceiptNumber,
		&i.UserReceiptID,
		&i.UserReceiptUsername,
		&i.ReceiptData,
		&i.ReceiptPdf,
		&i.CreatedAt,
	)
	return i, err
}

const getUserReceiptsByID = `-- name: GetUserReceiptsByID :many
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE user_receipt_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetUserReceiptsByIDParams struct {
	UserReceiptID int32 `json:"user_receipt_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetUserReceiptsByID(ctx context.Context, arg GetUserReceiptsByIDParams) ([]Receipt, error) {
	rows, err := q.db.Query(ctx, getUserReceiptsByID, arg.UserReceiptID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Receipt{}
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ReceiptID,
			&i.ReceiptNumber,
			&i.UserReceiptID,
			&i.UserReceiptUsername,
			&i.ReceiptData,
			&i.ReceiptPdf,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReceiptsByUsername = `-- name: GetUserReceiptsByUsername :many
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE user_receipt_username = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUserReceiptsByUsername(ctx context.Context, userReceiptUsername string) ([]Receipt, error) {
	rows, err := q.db.Query(ctx, getUserReceiptsByUsername, userReceiptUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Receipt{}
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ReceiptID,
			&i.ReceiptNumber,
			&i.UserReceiptID,
			&i.UserReceiptUsername,
			&i.ReceiptData,
			&i.ReceiptPdf,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReceipts = `-- name: ListReceipts :many
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListReceiptsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReceipts(ctx context.Context, arg ListReceiptsParams) ([]Receipt, error) {
	rows, err := q.db.Query(ctx, listReceipts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Receipt{}
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ReceiptID,
			&i.ReceiptNumber,
			&i.UserReceiptID,
			&i.UserReceiptUsername,
			&i.ReceiptData,
			&i.ReceiptPdf,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
