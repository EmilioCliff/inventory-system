// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: receipts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countReceipts = `-- name: CountReceipts :one
SELECT COUNT(*) FROM receipts
`

func (q *Queries) CountReceipts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countReceipts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserReceiptsByID = `-- name: CountUserReceiptsByID :one
SELECT COUNT(*) FROM receipts
WHERE user_receipt_id = $1
`

func (q *Queries) CountUserReceiptsByID(ctx context.Context, userReceiptID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUserReceiptsByID, userReceiptID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserReceiptsByUsername = `-- name: CountUserReceiptsByUsername :one
SELECT COUNT(*) FROM receipts
WHERE user_receipt_username= $1
`

func (q *Queries) CountUserReceiptsByUsername(ctx context.Context, userReceiptUsername string) (int64, error) {
	row := q.db.QueryRow(ctx, countUserReceiptsByUsername, userReceiptUsername)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReceipt = `-- name: CreateReceipt :one
INSERT INTO receipts(
    receipt_number, user_receipt_id,  user_receipt_username, receipt_pdf
) VALUES (
  $1, $2, $3, $4
)
RETURNING receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at
`

type CreateReceiptParams struct {
	ReceiptNumber       string `json:"receipt_number"`
	UserReceiptID       int32  `json:"user_receipt_id"`
	UserReceiptUsername string `json:"user_receipt_username"`
	ReceiptPdf          []byte `json:"receipt_pdf"`
}

func (q *Queries) CreateReceipt(ctx context.Context, arg CreateReceiptParams) (Receipt, error) {
	row := q.db.QueryRow(ctx, createReceipt,
		arg.ReceiptNumber,
		arg.UserReceiptID,
		arg.UserReceiptUsername,
		arg.ReceiptPdf,
	)
	var i Receipt
	err := row.Scan(
		&i.ReceiptID,
		&i.ReceiptNumber,
		&i.UserReceiptID,
		&i.UserReceiptUsername,
		&i.ReceiptData,
		&i.ReceiptPdf,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUserReceiptsByID = `-- name: GetAllUserReceiptsByID :many
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE user_receipt_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAllUserReceiptsByID(ctx context.Context, userReceiptID int32) ([]Receipt, error) {
	rows, err := q.db.Query(ctx, getAllUserReceiptsByID, userReceiptID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Receipt{}
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ReceiptID,
			&i.ReceiptNumber,
			&i.UserReceiptID,
			&i.UserReceiptUsername,
			&i.ReceiptData,
			&i.ReceiptPdf,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReceipt = `-- name: GetReceipt :one
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE receipt_number = $1 
LIMIT 1
`

func (q *Queries) GetReceipt(ctx context.Context, receiptNumber string) (Receipt, error) {
	row := q.db.QueryRow(ctx, getReceipt, receiptNumber)
	var i Receipt
	err := row.Scan(
		&i.ReceiptID,
		&i.ReceiptNumber,
		&i.UserReceiptID,
		&i.UserReceiptUsername,
		&i.ReceiptData,
		&i.ReceiptPdf,
		&i.CreatedAt,
	)
	return i, err
}

const getReceiptByID = `-- name: GetReceiptByID :one
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE receipt_id = $1 
LIMIT 1
`

func (q *Queries) GetReceiptByID(ctx context.Context, receiptID int64) (Receipt, error) {
	row := q.db.QueryRow(ctx, getReceiptByID, receiptID)
	var i Receipt
	err := row.Scan(
		&i.ReceiptID,
		&i.ReceiptNumber,
		&i.UserReceiptID,
		&i.UserReceiptUsername,
		&i.ReceiptData,
		&i.ReceiptPdf,
		&i.CreatedAt,
	)
	return i, err
}

const getUserReceiptsByID = `-- name: GetUserReceiptsByID :many
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE user_receipt_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetUserReceiptsByIDParams struct {
	UserReceiptID int32 `json:"user_receipt_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetUserReceiptsByID(ctx context.Context, arg GetUserReceiptsByIDParams) ([]Receipt, error) {
	rows, err := q.db.Query(ctx, getUserReceiptsByID, arg.UserReceiptID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Receipt{}
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ReceiptID,
			&i.ReceiptNumber,
			&i.UserReceiptID,
			&i.UserReceiptUsername,
			&i.ReceiptData,
			&i.ReceiptPdf,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReceiptsByUsername = `-- name: GetUserReceiptsByUsername :many
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
WHERE user_receipt_username = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetUserReceiptsByUsernameParams struct {
	UserReceiptUsername string `json:"user_receipt_username"`
	Limit               int32  `json:"limit"`
	Offset              int32  `json:"offset"`
}

func (q *Queries) GetUserReceiptsByUsername(ctx context.Context, arg GetUserReceiptsByUsernameParams) ([]Receipt, error) {
	rows, err := q.db.Query(ctx, getUserReceiptsByUsername, arg.UserReceiptUsername, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Receipt{}
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ReceiptID,
			&i.ReceiptNumber,
			&i.UserReceiptID,
			&i.UserReceiptUsername,
			&i.ReceiptData,
			&i.ReceiptPdf,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReceipts = `-- name: ListReceipts :many
SELECT receipt_id, receipt_number, user_receipt_id, user_receipt_username, receipt_data, receipt_pdf, created_at FROM receipts
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListReceiptsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReceipts(ctx context.Context, arg ListReceiptsParams) ([]Receipt, error) {
	rows, err := q.db.Query(ctx, listReceipts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Receipt{}
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ReceiptID,
			&i.ReceiptNumber,
			&i.UserReceiptID,
			&i.UserReceiptUsername,
			&i.ReceiptData,
			&i.ReceiptPdf,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchILikeReceipts = `-- name: SearchILikeReceipts :many
SELECT receipt_number FROM receipts
WHERE LOWER(receipt_number) LIKE LOWER('%' || $1 || '%')
`

func (q *Queries) SearchILikeReceipts(ctx context.Context, dollar_1 pgtype.Text) ([]string, error) {
	rows, err := q.db.Query(ctx, searchILikeReceipts, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var receipt_number string
		if err := rows.Scan(&receipt_number); err != nil {
			return nil, err
		}
		items = append(items, receipt_number)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUserReceipts = `-- name: SearchUserReceipts :many
SELECT user_receipt_username FROM receipts
WHERE LOWER(user_receipt_username) LIKE LOWER('%' || $1 || '%')
`

func (q *Queries) SearchUserReceipts(ctx context.Context, dollar_1 pgtype.Text) ([]string, error) {
	rows, err := q.db.Query(ctx, searchUserReceipts, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var user_receipt_username string
		if err := rows.Scan(&user_receipt_username); err != nil {
			return nil, err
		}
		items = append(items, user_receipt_username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
