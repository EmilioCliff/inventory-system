// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password, email, phone_number, address, stock, role
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING user_id, username, password, email, phone_number, address, stock, role, created_at
`

type CreateUserParams struct {
	Username    string `json:"username"`
	Password    string `json:"password"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
	Address     string `json:"address"`
	Stock       []byte `json:"stock"`
	Role        string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.Stock,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Stock,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password, email, phone_number, address, stock, role, created_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Stock,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, username, password, email, phone_number, address, stock, role, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Stock,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsename = `-- name: GetUserByUsename :one
SELECT user_id, username, password, email, phone_number, address, stock, role, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsename(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsename, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Stock,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT user_id, username, password, email, phone_number, address, stock, role, created_at FROM users
WHERE user_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserForUpdate, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Stock,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT user_id, username, password, email, phone_number, address, stock, role, created_at FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.Stock,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchILikeUsers = `-- name: SearchILikeUsers :many
SELECT username FROM users
WHERE LOWER(username) LIKE LOWER('%' || $1 || '%')
`

func (q *Queries) SearchILikeUsers(ctx context.Context, dollar_1 pgtype.Text) ([]string, error) {
	rows, err := q.db.Query(ctx, searchILikeUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserCredentials = `-- name: UpdateUserCredentials :one
UPDATE users
  set password = $3,
  email = $2,
  address = $4,
  phone_number = $5,
  username = $6
WHERE user_id = $1
RETURNING user_id, username, password, email, phone_number, address, stock, role, created_at
`

type UpdateUserCredentialsParams struct {
	UserID      int64  `json:"user_id"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	Address     string `json:"address"`
	PhoneNumber string `json:"phone_number"`
	Username    string `json:"username"`
}

func (q *Queries) UpdateUserCredentials(ctx context.Context, arg UpdateUserCredentialsParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserCredentials,
		arg.UserID,
		arg.Email,
		arg.Password,
		arg.Address,
		arg.PhoneNumber,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Stock,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPasswordFisrtLogin = `-- name: UpdateUserPasswordFisrtLogin :one
UPDATE users
  set password = $2
WHERE user_id = $1
RETURNING user_id, username, password, email, phone_number, address, stock, role, created_at
`

type UpdateUserPasswordFisrtLoginParams struct {
	UserID   int64  `json:"user_id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPasswordFisrtLogin(ctx context.Context, arg UpdateUserPasswordFisrtLoginParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPasswordFisrtLogin, arg.UserID, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Stock,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserStock = `-- name: UpdateUserStock :one
UPDATE users
  set stock = $2
WHERE user_id = $1
RETURNING user_id, username, password, email, phone_number, address, stock, role, created_at
`

type UpdateUserStockParams struct {
	UserID int64  `json:"user_id"`
	Stock  []byte `json:"stock"`
}

func (q *Queries) UpdateUserStock(ctx context.Context, arg UpdateUserStockParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserStock, arg.UserID, arg.Stock)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Stock,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
