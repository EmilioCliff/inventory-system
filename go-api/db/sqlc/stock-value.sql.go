// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: stock-value.sql

package db

import (
	"context"
)

const createUserStockValue = `-- name: CreateUserStockValue :one
INSERT INTO stock_value (
  user_id
) VALUES (
  $1
)
RETURNING user_id, value
`

func (q *Queries) CreateUserStockValue(ctx context.Context, userID int32) (StockValue, error) {
	row := q.db.QueryRow(ctx, createUserStockValue, userID)
	var i StockValue
	err := row.Scan(&i.UserID, &i.Value)
	return i, err
}

const deleteUserStockValue = `-- name: DeleteUserStockValue :exec
DELETE FROM stock_value
WHERE user_id = $1
`

func (q *Queries) DeleteUserStockValue(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserStockValue, userID)
	return err
}

const getAllStockValue = `-- name: GetAllStockValue :many
SELECT user_id, value FROM stock_value
`

func (q *Queries) GetAllStockValue(ctx context.Context) ([]StockValue, error) {
	rows, err := q.db.Query(ctx, getAllStockValue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StockValue{}
	for rows.Next() {
		var i StockValue
		if err := rows.Scan(&i.UserID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserStockValue = `-- name: GetUserStockValue :one
SELECT user_id, value FROM stock_value
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserStockValue(ctx context.Context, userID int32) (StockValue, error) {
	row := q.db.QueryRow(ctx, getUserStockValue, userID)
	var i StockValue
	err := row.Scan(&i.UserID, &i.Value)
	return i, err
}

const totalStockValue = `-- name: TotalStockValue :one
SELECT SUM("value") AS total_value
FROM stock_value
`

func (q *Queries) TotalStockValue(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, totalStockValue)
	var total_value int64
	err := row.Scan(&total_value)
	return total_value, err
}

const updateUserStockValue = `-- name: UpdateUserStockValue :one
UPDATE stock_value
  set value = value + $1
WHERE user_id = $2
RETURNING user_id, value
`

type UpdateUserStockValueParams struct {
	Value  int64 `json:"value"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) UpdateUserStockValue(ctx context.Context, arg UpdateUserStockValueParams) (StockValue, error) {
	row := q.db.QueryRow(ctx, updateUserStockValue, arg.Value, arg.UserID)
	var i StockValue
	err := row.Scan(&i.UserID, &i.Value)
	return i, err
}
